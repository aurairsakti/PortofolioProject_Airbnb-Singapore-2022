# -*- coding: utf-8 -*-
"""Project_AirBNB_1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DQYa1MiENhgpmVG9G_JP12Hi-wLreSB9

### <font color='red'>Goals Project</font>

- Memberikan keuntungan tertinggi kepada klien dalam memilih property terbaik di Singapura dari marketplace AirBNB

### <font color='red'>A. Library Used</font>

* `pandas` is a Python library used for working with data sets. It has functions for analyzing, cleaning, exploring, and manipulating data.
* `pandasql` allows you to query pandas DataFrames using SQL syntax. It works similarly to sqldf in R .
* `plotly` is an interactive, open-source plotting library that supports over 40 unique chart types covering a wide range of statistical visualization
"""

# A.1 installing package
!pip install pandas
!pip install pandasql
!pip install plotly
!pip install --upgrade 'sqlalchemy<2.0'

!pip install xlrd

"""### <font color='red'>B. Dataset</font>"""

# Library data manipulation
import pandas as pd
import pandasql as ps

# Library Data Visualization
import plotly.express as px
import plotly.graph_objects as go

from google.colab import drive
drive.mount('/content/drive')

ds_airbnb = pd.read_excel("/content/drive/MyDrive/DQLab/File/datasets_airbnb.xlsx")

ds_airbnb

# Create dataframe stored as listing_price_df
# Using SQL
listing_price_df = ps.sqldf("""
                            select count(id) as jumlah
                                  
                                  ,price
                            from ds_airbnb
                            group by price
                            order by price desc
                        """)
listing_price_df

"""### <font color='red'>Distribusi Harga Listing</font>

Melihat distribusi harga seluruh listing
"""

fig = px.scatter(listing_price_df,x="price", y="jumlah", title="Distribusi Harga Listing", trendline="ols", trendline_scope="overall", trendline_color_override="black", template="simple_white")


fig.show()

"""### <font color='red'>Trend harga pada neighbourhood</font>


"""

# Create dataframe stored as neighbourhood_price_df
# Using SQL
neighbourhood_price_df = ps.sqldf("""
                            select neighbourhood, price, count(id) as Jumlah_Room
                            from ds_airbnb
                            group by neighbourhood, price
                            order by neighbourhood
                        """)
neighbourhood_price_df

fig_line = px.line(neighbourhood_price_df,x="price",y="Jumlah_Room",color="neighbourhood",template="simple_white", markers=True)

fig_line.show()

"""### <font color='red'>Trend harga pada Room Type</font>"""

# Create dataframe stored as roomtype_price_df
# Using SQL
roomtype_price_df = ps.sqldf("""
                            select room_type, price, count(id) as Jumlah_Room
                            from ds_airbnb
                            group by room_type, price
                            order by room_type
                        """)
roomtype_price_df

fig_line = px.line(roomtype_price_df,x="price",y="Jumlah_Room",color="room_type",template="simple_white", markers=True)

fig_line.show()

"""### <font color='red'>Trend penyewaan harian</font>"""

# Create dataframe stored as penyewaan_harian_df
# Using SQL
penyewaan_harian_df = ps.sqldf("""
                            select date, count(date) as jumlah
                            from ds_airbnb
                            group by date
                            order by date
                        """)
penyewaan_harian_df

fig_bar = px.bar(penyewaan_harian_df,x="date",y="jumlah",template="simple_white")

fig_bar.show()

"""### <font color='red'>Mencari nilai MAX, MIN, Nilai Tengah, Rata-Rata</font>"""

# Create dataframe stored as nilai_df
# Using SQL
nilai_df = ps.sqldf("""
                            select max(price) as nilai_MAX, min(price) as nilai_MIN, (max(price)+min(price))/2 as median, avg(price) as rata_rata
                            from ds_airbnb
                        """)
nilai_df

"""### <font color='red'>Host_id & Host_name dengan property terbanyak dan paling sedikit</font>"""

# Create dataframe stored as pemilik_listing_df
# Using SQL
# Listing Paling Banyak dan Paling Sedikit
pemilik_listing_df = ps.sqldf("""
                            select host_id, host_name, count(id) as jumlah_property
                            from ds_airbnb
                            group by host_id, host_name
                            order by jumlah_property desc
                        """)
pemilik_listing_df

"""### <font color='red'>Trend Listing Per-Tahun</font>"""

# Menampilkan data keseluruhan
ds_airbnb

# Penambahan kolom year
#ds_airbnb['year'] = ds_airbnb['date'].str.slice(0,4)
ds_airbnb['year'] = ds_airbnb['date'].dt.year  
ds_airbnb.head()

ds_airbnb['month'] = ds_airbnb['date'].dt.month  
ds_airbnb.head()

bulantahun = pd.to_datetime(ds_airbnb['date']).dt.strftime('%Y-%m')

bulantahun

ds_airbnb['bulantahun'] = pd.to_datetime(ds_airbnb['date']).dt.strftime('%Y-%m')
ds_airbnb.head()

# Create dataframe stored as listing_bulanan_df
# Using SQL
listing_bulanan_df = ps.sqldf("""
                            select bulantahun, count(bulantahun) as jumlah_listing_bulanan
                            from ds_airbnb
                            group by bulantahun
                            order by bulantahun
                           
                            
                        """)
listing_bulanan_df

# Create dataframe stored as listing_tahunan_df
# Using SQL
listing_tahunan_df = ps.sqldf("""
                            select year, count(year) as jumlah_listing
                            from ds_airbnb
                            group by year
                            order by year
                        """)
listing_tahunan_df

fig_bar = px.bar(listing_tahunan_df,x="year",y="jumlah_listing", template="simple_white")

fig_bar.show()

"""* Tahun 2019 dan Tahun 2022 memiliki trend listing tertinggi
* Tahun 2020 dan Tahun 2021 memiliki trend listing terendah
"""

fig_line = px.line(listing_bulanan_df,x="bulantahun",y="jumlah_listing_bulanan",template="simple_white", markers=True)

#Modify Title
fig_line.update_layout(title="<b>Monthly Listings</b>", title_font=dict(size=20,family="arial"))

#Update X & Y Labels
fig_line.update_xaxes(title="<b>Periode</b>",title_font=dict(size=13,family="arial"))
fig_line.update_yaxes(title="<b>Total Listings",title_font=dict(size=13,family="arial"))

fig_line.update_layout(yaxis=dict(range=[0,3000]))#, xaxis=dict(range=[,"2019-12"]))

fig_line.show()

"""### <font color='red'>Revenue</font>

"""

# Create dataframe stored as revenue_bulanan_df
# Using SQL
revenue_bulanan_df = ps.sqldf("""
                            select bulantahun, sum(price) as revenue
                            from ds_airbnb
                            group by bulantahun
                            order by bulantahun
                           
                            
                        """)
revenue_bulanan_df

fig_line = px.line(revenue_bulanan_df,x="bulantahun",y="revenue",template="simple_white", markers=True)

#Modify Title
fig_line.update_layout(title="<b>Monthly Revenue</b>", title_font=dict(size=20,family="arial"))

#Update X & Y Labels
fig_line.update_xaxes(title="<b>Periode</b>",title_font=dict(size=13,family="arial"))
fig_line.update_yaxes(title="<b>Revenue",title_font=dict(size=13,family="arial"))

fig_line.update_layout(yaxis=dict(range=[0,350000]))#, xaxis=dict(range=[,"2019-12"]))

fig_line.show()

"""### <font color='red'>ID NAME Listing dengan Review Terbanyak</font>

"""

# Create dataframe stored as idname_review_df
# Using SQL
idname_review_df = ps.sqldf("""
                            select id, name, neighbourhood, neighbourhood_group, price, count(date) as reviews
                            from ds_airbnb
                            
                            group by id, name, neighbourhood, neighbourhood_group, price
                            order by reviews desc
                        """)
idname_review_df.head(5)

idname_review_df.loc[idname_review_df['reviews'] >= 280]

idname_review_df.iloc[0:5]

fig1 = px.bar(idname_review_df.iloc[0:5],x="name",y="reviews", template="simple_white", color="name", color_discrete_sequence=["#569DAA","#FF8400","#D14D72","#C8FF00","#89375F"])

#Modify Title
fig1.update_layout(title="<b>Top Listing Review</b>", title_font=dict(size=20,family="arial"))

#Update X & Y Labels
fig1.update_xaxes(showticklabels=False)

fig1.update_xaxes(title="<b>Nama Listing</b>",title_font=dict(size=13,family="arial"))
fig1.update_yaxes(title="<b>Total Reviews</b>",title_font=dict(size=13,family="arial"))



fig1.show()

"""### <font color='red'>Rata-rata harga listing per-neighbourhood group</font>"""

# Create dataframe stored as neighbourhood_price_df
# Using SQL
neighbourhood_price_df = ps.sqldf("""
                            select neighbourhood_group, avg(price) as Rata_Rata_Harga
                            from ds_airbnb
                            group by neighbourhood_group
                        """)
neighbourhood_price_df

fig_bar = px.bar(neighbourhood_price_df,x="neighbourhood_group",y="Rata_Rata_Harga",color="neighbourhood_group", template="simple_white",color_discrete_sequence=["#569DAA","#FF8400","#D14D72","#C8FF00","#89375F"])

fig_bar.update_layout(title="<b>Average Price</b>", title_font=dict(size=20,family="arial"))

#Update X & Y Labels
fig_bar.update_xaxes(title="<b>Region</b>",title_font=dict(size=13,family="arial"))
fig_bar.update_yaxes(title="<b>Average Price</b>",title_font=dict(size=13,family="arial"))

fig_bar.show()

"""### <font color='red'>Pengaruh Room Type pada jumlah review</font>"""

# Create dataframe stored as roomtype_review_df
# Using SQL
roomtype_review_df = ps.sqldf("""
                            select room_type, count(date) as jumlah_review, avg(price) as rata_rata_harga, sum(price) as revenue
                            from ds_airbnb
                            group by room_type
                        """)
roomtype_review_df

fig2 = px.pie(roomtype_review_df,values="jumlah_review",color="room_type", names="room_type",color_discrete_sequence=["#D14D72","#569DAA","#89375F","#FF8400"], hole=0.4)

#Modify Title
fig2.update_layout(title="<b>Room Type vs Review</b>", title_font=dict(size=20,family="arial"))

fig2.update_traces(textposition="outside", textfont=dict(color="black", size=13),textinfo="label+percent", pull=[0.1,0,0,0,0], rotation=-30)

fig2.show()

fig3 = px.bar(roomtype_review_df,y="revenue",x="room_type", color="room_type", color_discrete_sequence=["#D14D72","#569DAA","#89375F","#FF8400"], template="simple_white")

#Modify Title
fig3.update_layout(title="<b>Room Type Revenue</b>", title_font=dict(size=20,family="arial"))

#fig.update_traces(textposition="outside", textfont=dict(color="black", size=13),textinfo="label+percent", pull=[0.1,0,0,0,0], rotation=-30)

fig3.show()

"""### <font color='red'>Aktivitas pada neighbourhood</font>"""

# Create dataframe stored as aktivitas_neighbourhood_df
# Using SQL
aktivitas_neighbourhood_df = ps.sqldf("""
                            select neighbourhood_group, neighbourhood, count(date) as jumlah_review, max(price) as harga_listing_termahal
                            from ds_airbnb
                            where neighbourhood_group = "North Region"
                            group by neighbourhood_group, neighbourhood
                            order by jumlah_review desc
                        """)
aktivitas_neighbourhood_df

fig_bar = px.bar(aktivitas_neighbourhood_df,x="neighbourhood",y="jumlah_review",template="simple_white")

#Modify Title
fig_bar.update_layout(title="<b>Total Rent on the Neighbourhood</b>", title_font=dict(size=20,family="arial"))

#Update X & Y Labels
fig_bar.update_xaxes(title="<b>Neighbourhood</b>",title_font=dict(size=13,family="arial"))
fig_bar.update_yaxes(title="<b>Total Rent</b>",title_font=dict(size=13,family="arial"))

fig_bar.show()

"""### <font color='red'>Aktivitas pada Region</font>"""

# Create dataframe stored as aktivitas_region_df
# Using SQL
aktivitas_region_df = ps.sqldf("""
                            select neighbourhood_group, count(date) as jumlah_review, count(Distinct id) as jumlah_listing
                            from ds_airbnb
                            group by neighbourhood_group
                            order by jumlah_review desc
                        """)
aktivitas_region_df

"""Jumlah listing tidak terlalu berpengaruh pada jumlah review"""

fig = px.pie(aktivitas_region_df,values="jumlah_review",color="neighbourhood_group", names="neighbourhood_group",color_discrete_sequence=["#D14D72","#569DAA","#89375F","#FF8400","#C8FF00"], hole=0.4)

#Modify Title
fig.update_layout(title="<b>Reviews on the Region</b>", title_font=dict(size=20,family="arial"))

fig.update_traces(textposition="outside", textfont=dict(color="black", size=13),textinfo="label+percent", pull=[0.1,0,0,0,0], rotation=-1)

fig.show()

"""### <font color='red'>DASH APP</font>"""

#!pip install dash
!pip install jupyter-dash

# Library Dashboarding
from jupyter_dash import JupyterDash
from dash import html, dcc, Input, Output

# A. create dash app
app = JupyterDash(__name__)

# B. Design Layout
app.layout = html.Div(children=[
    html.H1("Dashboard Trends Airbnb Singapore", style={'text-align':'center','font-family':'arial','font-size':50,'color':'white','background-color':'black'})
    #,html.H2("Dashboard Trial 1 font lebih kecil")
    #,html.P("Trends Airbnb Singapore", style={'text-align':'center','font-family':'arial','font-size':20,'color':'white'})


    #menampilkan chart PIE
    ,html.Div(children=[
        dcc.Graph(figure=fig_line)
    ], style={'margin-left':200,'margin-right':200,'margin-top':50})

    ,html.P("Berdasarkan trend jumlah listing, sejak akhir 2019 terjadi penurunan bisnis Airbnb di Singapore. Namun terjadi lagi peningkatan sejak maret 2022", style={'text-align':'center','font-family':'arial','font-size':20,'color':'white'})

    ,html.Div(children=[
        dcc.Graph(figure=fig)
    ], style={'margin-left':200,'margin-right':200,'margin-top':50})

    ,html.P("Berdasarkan trend pada Region, Region dengan review terbanyak adalah North Region", style={'text-align':'center','font-family':'arial','font-size':20,'color':'white'})

    ,html.Div(children=[
        dcc.Graph(figure=fig_bar)
    ], style={'margin-left':200,'margin-right':200,'margin-top':50})

    ,html.P("Berdasarkan Chart Average Price, North Region memiliki rata-rata harga yang cukup rendah yaitu $75", style={'text-align':'center','font-family':'arial','font-size':20,'color':'white'})

    ,html.Div(children=[
        dcc.Graph(figure=fig2)
    ], style={'margin-left':200,'margin-right':200,'margin-top':50})

    ,html.P("Berdasarkan Chart Room Type vs Review, Room Type yang paling diminati oleh customer adalah Entire Homes/Apt", style={'text-align':'center','font-family':'arial','font-size':20,'color':'white'})

    ,html.Div(children=[
        dcc.Graph(figure=fig3)
    ], style={'margin-left':200,'margin-right':200,'margin-top':50})

    ,html.P("Berdasarkan Chart Room Type Revenue, Room Type Entire Homes/Apt memberikan revenue terbesar mencapai lebih dari $3.5M", style={'text-align':'center','font-family':'arial','font-size':20,'color':'white'})

    ,html.Div(children=[
        dcc.Graph(figure=fig1)
    ], style={'margin-left':200,'margin-right':200,'margin-top':50})

    ,html.P("Berdasarkan Chart Top Listing Review, listing yang memiliki review terbanyak adalah JB CITY SUASANA by Breeze Cozy Gateway", style={'text-align':'center','font-family':'arial','font-size':20,'color':'white'})

    ,html.P("_")
    ,html.P("_")

    ,html.H2("Conclusion & Suggestion", style={'text-align':'center','font-family':'arial','font-size':40,'color':'white'})

    ,html.P("Berdasarkan Analisa Data, ada beberapa poin untuk calon owner yang ingin menyewakan property di Airbnb:", style={'text-align':'center','font-family':'arial','font-size':20,'color':'white'})

    ,html.P("1. Saat ini adalah waktu yang tepat untuk berbisnis melalui Airbnb karena trend peningkatanterjadi sejak bulan maret tiap tahunnya", style={'text-align':'center','font-family':'arial','font-size':20,'color':'white'})

    ,html.P("2. Pemilihan lokasi yang dianjurkan adalah wilayah North Region", style={'text-align':'center','font-family':'arial','font-size':20,'color':'white'})

    ,html.P("3. Tipe Room yang harus diperbanyak adalah Entire Homes/Apt", style={'text-align':'center','font-family':'arial','font-size':20,'color':'white'})

    ,html.P("4. Harga sewa yang direkomendasikan berkisar $75", style={'text-align':'center','font-family':'arial','font-size':20,'color':'white'})

    ,html.P("5. Referensi listing bisa melihat JB CITY SUASANA by Breeze Cozy Gateway", style={'text-align':'center','font-family':'arial','font-size':20,'color':'white'})

], style={'background-color':'black'})


# C. Run Application
if __name__ == '__main__':
  app.run_server()
  #app.run_server(mode='inline')